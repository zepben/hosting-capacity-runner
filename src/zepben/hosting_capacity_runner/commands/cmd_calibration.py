import asyncio
import pprint

import click
from zepben.hosting_capacity_runner import pass_environment
from zepben.hosting_capacity_runner.utils import run_async


@click.group()
def cli():
    """Operate on Calibrations"""
    pass


@cli.command()
@click.argument("calibration-id", required=True, type=str)
@pass_environment
def get_tx_tap_settings(ctx, calibration_id):
    """
    Get the transformer tap settings generated by a calibration run.

    CALIBRATION_ID: ID/Name of the run to fetch calibration sets for.
    """

    async def main():
        eas_client = ctx.eas_client

        print("Press Ctrl+C to exit")
        try:
            result = await eas_client.async_get_transformer_tap_settings(
                calibration_id,
                feeder=None,
                transformer_mrid=None
            )
            pprint.pprint(result)
        except Exception as e:
            print(e)

    run_async(main)


@cli.command()
@pass_environment
def list(ctx):
    """
    Get the IDs of all calibration runs.
    """

    async def main():
        eas_client = ctx.eas_client

        try:
            result = await eas_client.async_get_hosting_capacity_calibration_sets()
            pprint.pprint(result)
        except Exception as e:
            print(e)

    run_async(main)


@cli.command()
@click.argument("calibration-id", required=True, type=str)
@pass_environment
def monitor(ctx, calibration_id):
    """
    Get the status of a calibration run.

    Use the ID returned from the server in `calibration run`
    """
    async def main(argv):
        eas_client = ctx.eas_client

        print("Press Ctrl+C to exit")
        while True:
            try:
                result = await eas_client.async_get_hosting_capacity_calibration_run(id=calibration_id)
                pprint.pprint(result)
            except Exception as e:
                print(e)
            await asyncio.sleep(5)

    run_async(main)
