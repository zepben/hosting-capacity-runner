async def main(argv):
    config_dir = get_config_dir(argv)
    config = get_config(config_dir)
    eas_client = get_client(config_dir)
    result = await eas_client.async_run_hosting_capacity_work_package(
        WorkPackageConfig(
            name=config["work_package_name"],
            syf_config=ForecastConfig(
                feeders=config["feeders"],
                years=config["forecast_years"],
                scenarios=config["scenarios"],
                load_time=TimePeriod(
                    start_time=datetime.fromisoformat(config["load_time"]["start"]),
                    end_time=datetime.fromisoformat(config["load_time"]["end"])
                )
            ),
            generator_config=GeneratorConfig(
                model=ModelConfig(
                    meter_placement_config=MeterPlacementConfig(
                        switch_meter_placement_configs=[SwitchMeterPlacementConfig(
                            meter_switch_class=SwitchClass.DISCONNECTOR,
                            name_pattern=".*Circuit Head Switch.*"
                        )]
                    ),
                    vmax_pu=2, #set high so does not come into play
                    vmin_pu=0.4, #set low so does not come into play
                    p_factor_base_exports=-1, 
                    p_factor_base_imports=1,
                    p_factor_forecast_pv=1,
                    fix_single_phase_loads=False,
                    max_single_phase_load=30000.0,
                    max_load_service_line_ratio=1.0,
                    max_load_lv_line_ratio=2.0,
                    max_load_tx_ratio=99.0,
                    max_gen_tx_ratio=99.0,
                    fix_overloading_consumers=False,
                    fix_undersized_service_lines=False,
                    feeder_scenario_allocation_strategy=FeederScenarioAllocationStrategy.ADDITIVE,
                    closed_loop_v_reg_enabled=False,
                    closed_loop_v_reg_set_point=0.9825,
                    seed=123,
                ),
                solve=SolveConfig(step_size_minutes=30.0),
                raw_results=RawResultsConfig(True, True, True, True, True)
            ),

            result_processor_config=ResultProcessorConfig(
                writer_config=WriterConfig(
                    writer_type=WriterType.PARQUET,
                    output_writer_config=WriterOutputConfig(
                        enhanced_metrics_config=EnhancedMetricsConfig(
                            True,
                            False,
                            True,
                            True,
                            True,
                            True,
                            True,
                            True,
                            True,
                            True,
                        ))),
                stored_results=StoredResultsConfig(False, False, True, False),
                metrics=MetricsResultsConfig(True)
            ),
            quality_assurance_processing=True
        )
    )